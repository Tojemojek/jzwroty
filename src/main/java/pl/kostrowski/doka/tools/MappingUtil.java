package pl.kostrowski.doka.tools;

import lombok.Data;
import org.apache.commons.lang3.StringUtils;

import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.FileReader;
import java.io.FileWriter;
import java.util.LinkedList;
import java.util.List;

@Data
public class MappingUtil {

    private String modelFromExcelclassHeader;
    private String myMappingsClassHeader;
    private String converterClassTemplate;
    private List<String> fileNames = new LinkedList<>();

    public MappingUtil() {
        initStrings();
        initFileNames();
    }

    private void initStrings() {
        StringBuilder sb = new StringBuilder();

        sb.append("package pl.kostrowski.doka.jzwroty.model.excel;\n\n");
        sb.append("import lombok.Data;\n\n");
        sb.append("import java.time.LocalDate;\n\n");

        sb.append("@Data\n");
        modelFromExcelclassHeader = sb.toString();
        sb.setLength(0);

        sb.append("package pl.kostrowski.doka.jzwroty.mappings;\n");
        sb.append("import lombok.Data;\n\n");
        sb.append("import java.util.HashMap;\n");
        sb.append("import java.util.Map;\n");
        sb.append("import java.util.stream.Collectors;\n\n");
        sb.append("@Data\n");
        sb.append("public class MyMappings {\n");
        myMappingsClassHeader = sb.toString();

        sb.setLength(0);

        converterClassTemplate = readFile("ExcelConverterClassTemplate","");

    }

    private void initFileNames() {
        fileNames.add("SalesmanExcel");
        fileNames.add("ProjectExcel");
        fileNames.add("MainProductGroupExcel");
        fileNames.add("DiscosExcel");

    }

    public List<String> readCsvFile(String fileName) {

        List<String> result = new LinkedList<>();
        try {
            BufferedReader bf = new BufferedReader(new FileReader("./biznesowe/" + fileName + ".csv"));
            String s = bf.readLine();
            while (StringUtils.isNotBlank(s)) {
                result.add(s);
                s = bf.readLine();
            }
            bf.close();
        } catch (Exception e) {
            //do nothing - just a util class
        }
        return result;
    }

    public String readFile(String fileName,String fileExtension) {

        StringBuilder sb = new StringBuilder();
        try {
            BufferedReader bufferedReader = new BufferedReader(new FileReader("./biznesowe/" + fileName + fileExtension));
            String s;
            while ((s=bufferedReader.readLine())!=null) {
                sb.append(s);
                sb.append("\n");
            }
            bufferedReader.close();
        } catch (Exception e) {
            //do nothing - just a util class
        }
        return sb.toString();
    }

    public void createFromExcelEntity(String className) {

        List<String> input = readCsvFile(className);

        StringBuilder sb = new StringBuilder();
        sb.append(modelFromExcelclassHeader);
        sb.append("public class ").append(className).append(" {\n");
        sb.append("\t//This class is AutoGenerated from csv definition");

        for (String s : input) {
            String[] splited = s.split(",");
            sb.append("\tprivate ");
            sb.append(splited[3]);
            sb.append(" ");
            sb.append(splited[1]);
            sb.append(";\n\n");
        }
        sb.append("}");

        try {
            BufferedWriter br = new BufferedWriter(new FileWriter("./src/main/java/pl/kostrowski/doka/jzwroty/model/excel/" + className + ".java"));
            br.write(sb.toString());
            br.close();
        } catch (Exception e) {
            //do nothing, util class...
        }


    }

    public void createColumnMappingFromExcel(List<String> classNames) {

        StringBuilder sb = new StringBuilder();
        sb.append(myMappingsClassHeader);

        sb.append("\t//This class is AutoGenerated from csv definition\n");

        sb.append("\tprivate static MyMappings instance = new MyMappings();\n" +
                "\n" +
                "\tpublic static MyMappings getInstance() {\n" +
                "\t\treturn instance;\n" +
                "\t}");


        for (String className : classNames) {
            String classNameCamelCase = className.substring(0, 1).toLowerCase() + className.substring(1);
            String tmpMapName = classNameCamelCase + "Columns";
            String tmpReverseMapName = "inverted" + className + "Columns";

            sb.append("\tprivate Map<String, String> ").append(tmpMapName).append(" = new HashMap<>();\n");
            sb.append("\tprivate Map<String, String> ").append(tmpReverseMapName).append(";\n");
        }
        sb.append("\n\n\t{\n");

        for (String className : classNames) {
            List<String> input = readCsvFile(className);
            String classNameCamelCase = className.substring(0, 1).toLowerCase() + className.substring(1);
            String tmpMapName = classNameCamelCase + "Columns";
            String tmpReverseMapName = "inverted" + className + "Columns";
            for (String s : input) {
                String[] splited = s.split(",");
                sb.append("\t");
                sb.append(tmpMapName).append(".put(\"");
                sb.append(splited[0]);
                sb.append("\"" + "," + "\"");
                sb.append(splited[1]);
                sb.append("\");\n");
            }
            sb.append("\n\t");
            sb.append(tmpReverseMapName).append(" = ").append(tmpMapName).append(".entrySet()\n");
            sb.append("\t\t.stream()\n");
            sb.append("\t\t.collect(Collectors.toMap(Map.Entry::getValue, Map.Entry::getKey));\n\n");
        }
        sb.append("\t}\n}");

        try {
            BufferedWriter br = new BufferedWriter(new FileWriter("./src/main/java/pl/kostrowski/doka/jzwroty/mappings/MyMappings.java"));
            br.write(sb.toString());
            br.close();
        } catch (Exception e) {
            //do nothing, util class...
        }
    }

    public void createConverterClassesFromExcel(List<String> classNames){

        for (String className : classNames) {
            List<String> input = readCsvFile(className);
            String converterClassContents = new String(converterClassTemplate);
            String doTheJobPart = createDoTheJobPart(className, input);
            converterClassContents = converterClassContents.replaceAll("CLASS_NAME_PLACEHOLDER",className);
            converterClassContents = converterClassContents.replaceAll("WORK_IS_DONE_HERE",doTheJobPart);
            try {
                BufferedWriter br = new BufferedWriter(new FileWriter("./src/main/java/pl/kostrowski/doka/jzwroty/converters/excel/Convert"+className+".java"));
                br.write(converterClassContents);
                br.close();
            } catch (Exception e) {
                //do nothing, util class...
            }
        }

    }


    private String createDoTheJobPart (String className,List<String> input){
        StringBuilder sb = new StringBuilder();

        input.remove(0);

        for (String s : input) {
            String[] split = s.split(",");
            String s1 = split[1];
            String s3 = split[3];
            sb.append("\t\t\t");
            sb.append(s3)
                    .append(" ")
                    .append(s1)
                    .append("Tmp = parse")
                    .append(s3)
                    .append("FromCell(")
                    .append("currentRow.getCell(columnNumbers.get(\"")
                    .append(s1)
                    .append("\")));\n");
            sb.append("\t\t\t");
            sb.append("result.set")
                    .append(StringUtils.capitalize(s1))
                    .append("(")
                    .append(s1)
                    .append("Tmp);\n\n");

            //currentRow.getCell(columnNumbers.get("Rental Project")
        }
        return sb.toString();
    }


    public void createEntity(List<String> input) {

        StringBuilder sb = new StringBuilder();

        System.out.println("//AutoGenerated");

        System.out.println("@Id\n" +
                "@GeneratedValue(strategy = GenerationType.AUTO)\n" +
                "@Column(name = \"id\")\n" +
                "private Long id;\n");

        System.out.println("\n" +
                "@Column(name = \"file_name\")\n" +
                "private String fileName;");

        for (String s : input) {
            String[] podzielony = s.split(",");

            String[] strings = StringUtils.splitByCharacterTypeCamelCase(podzielony[0]);

            sb.setLength(0);
            for (String string : strings) {
                sb.append(string.toLowerCase());
                sb.append("_");
            }
            sb.deleteCharAt(sb.lastIndexOf("_"));

            System.out.printf("@Column(name = \"%s\")\n", sb.toString());
            System.out.printf("private %s %s; \n\n", podzielony[3], podzielony[0]);
        }

        System.out.println("//End of AutoGenerated");
    }


    public void createConverterFromDtoToEntity(List<String> input) {

        System.out.println("//AutoGenerated");
        for (String s : input) {
            String[] podzielony = s.split(",");
            String nameUp = StringUtils.capitalize(podzielony[0]);
            String name = podzielony[0];

            if ("BigDecimal".equals(podzielony[3])) {
                System.out.printf("\nDouble %sTmp = lineFromFileDto.get%s();\n", name, nameUp);
                System.out.printf("lineFromFile.set%s(parseDoubleToBigDecimal(%sTmp, %d));\n", nameUp, name, Integer.parseInt(podzielony[4]));
            } else {
                System.out.printf("\nlineFromFile.set%s(lineFromFileDto.get%s());\n", nameUp, nameUp);
            }
        }
        System.out.println("//End of AutoGenerated");
    }

}
